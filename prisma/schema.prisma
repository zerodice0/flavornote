// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  nickname  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  reviews   Review[]
  wishlists Wishlist[]
  followers Follow[] @relation("UserFollowers")
  following Follow[] @relation("UserFollowing")
  comments  Comment[]

  @@map("users")
}

model Restaurant {
  id          String   @id @default(cuid())
  name        String
  address     String?
  category    String?
  priceRange  String?
  latitude    Float?
  longitude   Float?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  reviews   Review[]
  wishlists Wishlist[]

  @@map("restaurants")
}

model Review {
  id           String   @id @default(cuid())
  content      String
  willRevisit  Boolean
  images       String[] // Array of image URLs
  tip          String?
  visitDate    DateTime?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Foreign keys
  userId       String   @map("user_id")
  restaurantId String   @map("restaurant_id")

  // Relations
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  menuReviews  MenuReview[]
  comments     Comment[]

  @@map("reviews")
}

model MenuReview {
  id          String  @id @default(cuid())
  menuName    String
  description String?
  rating      Int     // 1-5 scale
  price       Int?    // in cents
  
  // Foreign keys
  reviewId    String  @map("review_id")
  
  // Relations
  review      Review  @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@map("menu_reviews")
}

model Wishlist {
  id           String   @id @default(cuid())
  priority     String   @default("medium") // "high", "medium", "low"
  tags         String[] // ["date", "family", "business", etc.]
  notes        String?
  budgetMin    Int?     // in cents
  budgetMax    Int?     // in cents
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Foreign keys
  userId       String   @map("user_id")
  restaurantId String   @map("restaurant_id")

  // Relations
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@unique([userId, restaurantId])
  @@map("wishlists")
}

model Follow {
  followerId  String @map("follower_id")
  followingId String @map("following_id")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  follower    User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
  @@map("follows")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Foreign keys
  userId    String   @map("user_id")
  reviewId  String   @map("review_id")

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@map("comments")
}